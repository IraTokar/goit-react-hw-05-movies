{"version":3,"file":"static/js/736.c1fae526.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","components/TMDBApi.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  list-style-type: none;\n  display: grid;\n  grid-template-columns: repeat(5, 1fr);\n  margin-bottom: 20px;\n`;\n\nexport const Text = styled.p`\n  font-weight: 600;\n  font-size: 18px;\n  margin-bottom: 10px;\n`;","import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { fetchActors } from \"components/TMDBApi\";\nimport Loader from \"components/Loader/Loader\";\nimport { List, Text } from \"./Cast.styled\";\n\nconst Cast = () => {\n    const [actorsInfo, setActorsInfo] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const { movieId } = useParams();\n\n    useEffect(() => {\n        const fetchActorsInfo = () => {\n            setIsLoading(true);\n\n            fetchActors(movieId)\n                .then(actors => { setActorsInfo(actors); })\n                .catch(error => { console.log(error); })\n                .finally(() => { setIsLoading(false) })\n        }\n\n        fetchActorsInfo();\n    }, [movieId]);\n\n\n    return (\n        <>\n            {isLoading && <Loader />}\n            <h2>Movie cast</h2>\n            <List>\n                {actorsInfo.map(({ id, name, original_name, profile_path, character }) => (\n                    <li key={id}>\n                        <img src={`https://image.tmdb.org/t/p/w500/${profile_path}`} alt={original_name} width=\"200px\"/>\n                        <Text>{name}</Text>\n                        <Text>Character: {character}</Text>\n                    </li>\n                ))\n                    \n                }\n            </List>\n        </>\n    )\n    \n};\n\nexport default Cast;\n\n\n\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = 'a7e744545a90e8a389dfa0119353f0c2';\n\nexport const fetchTrending = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n    return response.data.results;\n};\n\nexport const fetchSearchByKeyword = async keyword => {\n    const response = await axios.get(`search/movie?api_key=${API_KEY}&include_adult=false&language=en-US&page=1&query=${keyword}`);\n    return response.data.results;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(`movie/${movieId}?api_key=${API_KEY}&language=en-US`);\n  return response.data;\n};\n\nexport const fetchActors = async movieId => {\n    const response = await axios.get(`movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`);\n    return response.data.cast;\n};\n\nexport const fetchReviews = async movieId => {\n    const response = await axios.get(`movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`)\n    return response.data.results;\n};\n\n\n\n\n\n"],"names":["List","styled","_templateObject","_taggedTemplateLiteral","Text","_templateObject2","_useState","useState","_useState2","_slicedToArray","actorsInfo","setActorsInfo","_useState3","_useState4","isLoading","setIsLoading","movieId","useParams","useEffect","fetchActors","then","actors","catch","error","console","log","finally","_jsxs","_Fragment","children","_jsx","Loader","map","_ref","id","name","original_name","profile_path","character","src","concat","alt","width","axios","API_KEY","fetchTrending","_asyncToGenerator","_regeneratorRuntime","_callee","response","_context","prev","next","sent","abrupt","data","results","stop","apply","arguments","fetchSearchByKeyword","_ref2","_callee2","keyword","_context2","_x","fetchMovieDetails","_ref3","_callee3","_context3","_x2","_ref4","_callee4","_context4","cast","_x3","fetchReviews","_ref5","_callee5","_context5","_x4"],"sourceRoot":""}